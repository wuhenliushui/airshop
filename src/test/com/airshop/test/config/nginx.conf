
#user  nobody;
#工作进程，根据硬件调整，有人说几核cpu，就配几个，我觉得可以多一点 
worker_processes  1;

#错误日志
error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid文件位置
pid        logs/nginx.pid;


events {
    #工作进程的最大连接数量，根据硬件调整，和前面工作进程配合起来用，尽量大，但是别把cpu跑到100%就行
    worker_connections  1024;
}


http {
    include       mime.types;
    #反向代理配置，可以打开proxy.conf看看  
    include       proxy.conf;  
    #fastcgi配置，可以打开fastcgi.conf看看  
    include       fastcgi.conf; 

    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    tcp_nopush      on;

    #keepalive_timeout  0;
    #keepalive_timeout  65;

    send_timeout 60;

    fastcgi_connect_timeout 75;
    fastcgi_read_timeout 120;
    fastcgi_send_timeout 120;

    #gzip  on;

    upstream shop.as.com {  
      #根据ip计算将请求分配各那个后端tomcat，许多人误认为可以解决session问题，其实并不能。  
      #同一机器在多网情况下，路由切换，ip可能不同 ip_hash;   
      server 127.0.0.1:8080 ;  
    } 

    server {
        listen       80;
        server_name  shop.as.com;

        #charset koi8-r;

        access_log  logs/shop.access.log  main;

        #静态文件，nginx自己处理  
        #location ~ ^/(images|javascript|js|css|flash|media|static)/  {  
        #        root    /var/www/virtual/big.server.com/htdocs;  
        #        #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。  
        #        expires 30d;  
        #}  
  
        #把请求转发给后台web服务器，反向代理和fastcgi的区别是，反向代理后面是web服务器，fastcgi后台是fasstcgi监听进程，当然，协议也不一样。  
        location / {  
            proxy_pass      http://shop.as.com;  
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

}
